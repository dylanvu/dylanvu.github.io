{"version":3,"sources":["components/ProjectContent.jsx","components/ProjectGroup.jsx","components/Navbar.jsx","App.js","reportWebVitals.js","index.js"],"names":["ProjectContent","props","useState","paragraphs","setParagraphs","useEffect","fetch","textPath","then","r","text","split","className","style","color","hook","title","map","paragraph","validImageExtension","i","length","includes","checkIfphoto","src","process","alt","href","target","rel","ProjectGroup","type","id","scroll","borderColor","group","projects","project","projectHook","projectName","Navbar","responsiveClass","setResponsive","scrolling","document","getElementById","scrollIntoView","behavior","onClick","icon","faGithub","faLinkedinIn","faEnvelope","AboutMe","PythonProjects","JavaScriptProjects","CProjects","App","introText","setIntrotext","addEventListener","muted","play","intro","currHeaderText","setTimeout","headerHandle","setInterval","documentElement","scrollTop","body","height","clearInterval","AnimateHome","window","onbeforeunload","scrollTo","preload","autoPlay","loop","playsInline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.243f48f9.chunk.js","sourcesContent":["import { React, useEffect, useState } from 'react'\r\n\r\n/* Props:\r\ntitle = title of the project\r\nhook = collapsible title\r\nid = unique css id, only used for finding the collapsible in the collapsible function and has no effect on the styling\r\ntextPath = the path of the text description of the content relative to the public folder. This is a text file inside of the public/{projectgroup}/{projectname} directory\r\n    Example of valid text path prop: \"/projectgroup/javascript/discordqotd/discordqotd.txt\"\r\n*/\r\n\r\nconst ProjectContent = (props) => {\r\n\r\n    const [paragraphs, setParagraphs] = useState([])\r\n\r\n    \r\n    useEffect(() => {\r\n        // Import text file and split into array divided by paragraph\r\n        const getParagraphs = () => {\r\n        // eslint-disable-next-line\r\n        fetch(props.textPath)\r\n            .then(r => r.text())\r\n            .then(text => {\r\n                setParagraphs(text.split(\"\\n\"))\r\n            })\r\n\r\n        }\r\n        getParagraphs();\r\n    // eslint-disable-next-line\r\n    },[])\r\n\r\n    function checkIfphoto(text) {\r\n        // The photo refereced in the txt file is a path that's uploaded in the public folder\r\n        // Add more file extensions if needed\r\n        let validImageExtension = ['.jpg', '.png', '.jpeg', '.svg', '.webp']\r\n        for (let i = 0; i < validImageExtension.length; i++) {\r\n            if (text.includes(validImageExtension[i])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function CheckIfLink(text) {\r\n        if (text.includes(\"github.com/\") || text.includes(\"devpost.com/software\") || text.includes(\"https://\")) {\r\n            return true;\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"project-content\">\r\n            <h4 style={{color: `${props.color}` }}> {props.hook}: </h4>\r\n            <h3 style={{color: `${props.color}` }}> {props.title} </h3>\r\n            {paragraphs.map((paragraph) => {\r\n                //console.log(paragraph);\r\n                if (checkIfphoto(paragraph)) {\r\n                    //console.log(\"Hi there\");\r\n                    return <img src={process.env.PUBLIC_URL + paragraph} alt={paragraph}/>\r\n                } else if (CheckIfLink(paragraph)) {\r\n                    return <p className=\"text\"><a className=\"collapsible-link\" href={paragraph} target=\"_blank\" rel=\"noreferrer\">{paragraph}</a></p>\r\n                } else {\r\n                    return <p className=\"text\">{paragraph}</p>\r\n                }\r\n                \r\n            }\r\n            )}\r\n            <br/><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectContent","import React from 'react'\r\nimport ProjectContent from './ProjectContent'\r\nimport Collapsible from './Collapsible'\r\n\r\n/* Props\r\ncolor = string hex color of the project groups\r\ngroup = string of name of the project group\r\nscroll = css id to scroll to\r\nprojects = array of project objects with the following attributes:\r\n    projectHook = string sentence to \"hook\" someone in\r\n    projectName = name of the specific project\r\n    textPath = path to .txt file containing the project contents in the public folder, relative to the public folder\r\n*/\r\n\r\n\r\nconst ProjectGroup = (props) => {\r\n    return (\r\n        <div className=\"ProjectGroup\">\r\n            {/* <p className=\"project-group-title\" style={{color: `${props.color}` }}>\r\n                {props.group}\r\n            </p> */}\r\n            <button type=\"button\" className=\"project-group-title\" id={props.scroll} style={{borderColor : `${props.color}`}}>{props.group}</button>\r\n            <br/>\r\n            <br/>\r\n            {props.projects.map((project) => (\r\n                <ProjectContent hook={project.projectHook} title={project.projectName} id={project.projectName} textPath={project.textPath} color={props.color}/>\r\n            ))}\r\n            {/* {props.projects.map((project) => (\r\n                <div>\r\n                    <p>\r\n                        {project.projectHook}&nbsp;\r\n                        <span className=\"text-category\" style={{color: `${props.color}` }} >{project.projectName}</span>\r\n                    </p>\r\n                    <br/>\r\n                </div>\r\n            ))}\r\n            {props.projects.map((project) => (\r\n                <ProjectContent color={props.color} name={project.projectName} image={project.projectImage} description={project.projectDescription}/>\r\n            ))} */}\r\n        </div>\r\n    )\r\n}\r\n// When you refresh, the content does not get routed again. Check out https://stackoverflow.com/questions/27928372/react-router-urls-dont-work-when-refreshing-or-writing-manually\r\nexport default ProjectGroup","import {React, useState} from 'react'\r\n// Import font awesome icons. Follow these instructions: https://fontawesome.com/how-to-use/on-the-web/using-with/react\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\r\nimport { faLinkedinIn } from '@fortawesome/free-brands-svg-icons'\r\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// The eslint-disable-next-line is necessary because these are <a> and not <button> so tons of warnings pop up.\r\n//I'm a bit lazy to fix this because it would involve fixing the css styling and this works as it is\r\nconst Navbar = () => {\r\n    const [responsiveClass, setResponsive] = useState(\"inactive\");\r\n\r\n    function scrolling(id) {\r\n        if (responsiveClass === \"is-responsive\") {\r\n            setResponsive('inactive');\r\n        }\r\n\t\tdocument.getElementById(id).scrollIntoView({behavior: \"smooth\"});\r\n\t}\r\n    \r\n    function toggleBurger() {\r\n        // console.log(\"Burger clicked\");\r\n        if (responsiveClass === \"inactive\") {\r\n            setResponsive('is-responsive');\r\n        } else {\r\n            setResponsive('inactive');\r\n        }\r\n    }\r\n\r\n    return(\r\n        <nav className={`navbar ${responsiveClass}`} id=\"navbar\">\r\n            {/* eslint-disable-next-line */}\r\n            <a className=\"nav-link\" onClick={() => scrolling('About')}><span className=\"name\">Dylan Vu</span></a>\r\n            {/* eslint-disable-next-line */}\r\n            <a className=\"nav-link\" style={{ color: \"#c0392b\" }} onClick={() => scrolling('JS')}><span>JavaScript/NodeJS</span></a>\r\n            {/* eslint-disable-next-line */}\r\n            <a className=\"nav-link\" style={{ color: \"#2081C3\" }} onClick={() => scrolling('Python')}><span>Python</span></a>\r\n            {/* eslint-disable-next-line */}\r\n            <a className=\"nav-link\" style={{ color: \"#6DA34D\" }} onClick={() => scrolling('C')}><span>C++/C#</span></a>\r\n            {/* eslint-disable-next-line */}\r\n            <a className=\"nav-link\" style={{ color: \"#FE5D26\" }} href=\"/about/Dylan Vu Resume.pdf\" target=\"_blank\" rel=\"noreferrer\"><span>Resume</span></a>\r\n            <a href=\"https://github.com/vu-dylan\" target=\"_blank\" rel=\"noreferrer\" style={{ color: \"#f2f2f2\" }}>\r\n                <FontAwesomeIcon\r\n                    icon={faGithub}\r\n                    id=\"github\"\r\n                    className=\"icon\"\r\n                />\r\n            </a>\r\n            <a href=\"https://www.linkedin.com/in/dylanvu9/\" target=\"_blank\" rel=\"noreferrer\" style={{ color: \"#f2f2f2\" }}>\r\n                <FontAwesomeIcon\r\n                    icon={faLinkedinIn}\r\n                    \r\n                    className=\"icon\"\r\n                />\r\n            </a>\r\n            <a href=\"mailto:dylanvu@ucsb.edu\" target=\"_blank\" rel=\"noreferrer\" style={{ color: \"#f2f2f2\" }}>\r\n                <FontAwesomeIcon\r\n                    icon={faEnvelope}\r\n                    \r\n                    className=\"icon\"\r\n                />\r\n            </a> \r\n            <div className={`hamburger ${responsiveClass}`} id=\"hamburger\" onClick={() => toggleBurger()}>\r\n                <span className=\"line\"></span>\r\n                <span className=\"line\"></span>\r\n                <span className=\"line\"></span>\r\n            </div>\r\n        </nav>\r\n    )\r\n\r\n}\r\n\r\nexport default Navbar","import \"./App.css\";\r\nimport { useEffect, useState } from \"react\"\r\nimport ProjectGroup from \"./components/ProjectGroup\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\n// If there are issues with net::ERR_ABORTED 404, look into package.json and make sure the homepage is set to github pages with the / repository name.\r\n// Example: https://vu-dylan.github.io/portfolio/\r\n\r\n\r\nlet AboutMe = [{\r\n\tprojectHook: \"My name is Dylan Vu\",\r\n\tprojectName: \"\",\r\n\ttextPath: \"/about/about.txt\"\r\n}]\r\n\r\nlet PythonProjects = [{\r\n    projectHook: \"Convert your Spotify playlist to a YouTube playlist\",\r\n    projectName: \"You-tify\",\r\n\ttextPath: \"/projectgroup/python/youtify/youtify.txt\"\r\n    },{\r\n    projectHook: \"Record the current UCSB course availability with the click of a button\",\r\n    projectName: \"GoldWebscraper\",\r\n\ttextPath: \"/projectgroup/python/goldwebscraper/goldwebscraper.txt\"\r\n    }, {\r\n\t\tprojectHook: \"Draw on a projector and a computer for a seamless hybrid learning experience\",\r\n\t\tprojectName: \"GRIP Board\",\r\n\t\ttextPath: \"/projectgroup/python/gripboard/gripboard.txt\"\r\n\t}]\r\n\r\nlet JavaScriptProjects = [{\r\n    projectHook: \"Add and save your favorite movies through a social media app\",\r\n    projectName: \"SeenIt\",\r\n\ttextPath: \"/projectgroup/javascript/seenit/seenit.txt\"\r\n    },{\r\n    projectHook: \"Draw with your friends in a collaborative whiteboard\",\r\n    projectName: \"SketchedOut\",\r\n\ttextPath: \"/projectgroup/javascript/sketchedout/sketchedout.txt\"\r\n    },{\r\n    projectHook: \"Increase engagement in your Discord server\",\r\n    projectName: \"Discord Question of the Day (QOTD)\",\r\n\ttextPath: \"/projectgroup/javascript/discordqotd/discordqotd.txt\"\r\n\t},{\r\n    projectHook: \"Modernize your club website\",\r\n    projectName: \"UCSB Robotics Website\",\r\n\ttextPath: \"/projectgroup/javascript/ucsbrobotics/ucsbrobotics.txt\"\r\n}]\r\n\r\nlet CProjects = [{\r\n\tprojectHook: \"Use a VR controller that gives tactile feedback\",\r\n\tprojectName: \"GRIP Controller\",\r\n\ttextPath: \"/projectgroup/clangs/grip/grip.txt\"\r\n}]\r\n\r\nfunction App() {\r\n\tconst [introText, setIntrotext] = useState(\"\");\r\n\tuseEffect(() => {\r\n\t\t// Play video and animate header typing\r\n\t\t// React has an issue with the muted in the video tag not being set properly.\r\n\t\tdocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\t\t\tdocument.getElementById(\"video\").muted = true;\r\n\t\t})\r\n\t\tdocument.getElementById(\"video\").play(); // Might be necessary for chrome\r\n\t\tAnimateHome();\r\n\t},[])\r\n\r\n\tfunction AnimateHome() {\r\n\t\tlet intro = \"Hi, I'm Dylan Vu. Welcome to my site!\";\r\n\t\tlet currHeaderText = intro[0];\r\n\t\tlet i = 0;\r\n\t\t// Animate \"typing\"\r\n\t\tsetTimeout(() => {\r\n\t\t\tlet headerHandle = setInterval(() => {\r\n\t\t\t\tsetIntrotext(currHeaderText);\r\n\t\t\t\ti++;\r\n\t\t\t\tcurrHeaderText = currHeaderText + intro[i];\r\n\t\t\t\tif (i >= intro.length) {\r\n\t\t\t\t\t// After animation ends, change height if the user has not scrolled yet\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t// Shrink header to expose content only if they haven't scrolled yet\r\n\t\t\t\t\t\t// Use both documentElement for chrome, and body for everything else\r\n\t\t\t\t\t\tif (!document.documentElement.scrollTop && !document.body.scrollTop) {\r\n\t\t\t\t\t\t\tdocument.getElementById(\"header\").style.height = \"85vh\";\r\n\t\t\t\t\t\t\t// document.getElementById(\"video\").style.height = \"85vh\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, 500)\r\n\t\t\t\t\tclearInterval(headerHandle);\r\n\t\t\t\t}\r\n\t\t\t}, 60)\r\n\t\t}, 600)\r\n\t\t\r\n\r\n\t\t\r\n\t}\r\n\r\n\t// When you refresh, get sent to the top.\r\n\twindow.onbeforeunload = function() {\r\n\t\twindow.scrollTo(0,0);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"header\" id=\"header\">\r\n\t\t\t\t<div className=\"welcome\">\r\n\t\t\t\t\t{introText}\r\n\t\t\t\t</div>\r\n\t\t\t\t<video className=\"video\" preload=\"auto\" id=\"video\" autoPlay loop muted playsInline>\r\n\t\t\t\t\t<source src={process.env.PUBLIC_URL + \"/header.mp4\"} type='video/mp4' />\r\n\t\t\t\t\tVideo tag not supported\r\n\t\t\t\t</video>\r\n\t\t\t</div>\r\n\t\t\t<Navbar/>\r\n\t\t\t<div className=\"content\">\r\n\t\t\t\t\r\n\t\t\t\t<ProjectGroup projects={AboutMe} color={\"#36393f\"} group=\"About\" scroll=\"About\"/>\r\n\t\t\t\t<ProjectGroup projects={JavaScriptProjects} color={\"#c0392b\"} group=\"NodeJS\" scroll=\"JS\"/>\r\n\t\t\t\t<ProjectGroup projects={PythonProjects} color={\"#2081C3\"} group=\"Python\" scroll=\"Python\"/>\r\n\t\t\t\t<ProjectGroup projects={CProjects} color={\"#6DA34D\"} group=\"C++/C#\" scroll=\"C\"/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n\r\n// D++ red? #D40000\r\n// Old JS red: #DD1C1A\r\n\r\n/* TODO:\r\n\r\nProject arrays into JSON ?\r\n\r\n*/\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}